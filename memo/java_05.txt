< package의 명명법>
- 패키지명은 모두 소문자로 한다.(클래스명과 충동을 방지하기 위한 목적)
- 패키지명은 도메인 주소를 역으로 할 것을 권장한다.(유일한 패키지명을 만드는 방법이 됨), 안드로이드 또는 스프링 프로젝트에서는 필수로 정함
- ex) captain6.co.kr -> kr.co.captain6


< package 사용 목적 >
- 서로 관련이 있는 파일(클래스)을 모아 서 사용하는 목적
- 권한을 가진 사용자가 사용할 수 있도록 접근을 제한하는 목적


< package안의 클래스의 접근 제한 >
- public 에세스: 클래스 앞에 public을 쓰는 경우, 모든 곳에서 사용 가능한 클래스
- package(default) 에세스: 클래스 앞에 public을 쓰지 않는 경우, 같은 패키지 내에서만 사용 가능


< 클래스 안에 멤버에 대한 접근 제한, access modifier >
- private: 같은 클래스 안의 멤버에서만 사용 가능
- default: 같은 패키지 내에서만 사용 가능, 멤버(변수, 메서드) 앞에 아무것도 쓰지 않은 경우
- protected: 상속을 받은 클래스에서는 사용 가능, 같은 패키지 안에서도 사용 가능 => ● 패키지가 달라도 상속을 받았다면 사용 가능
- public: 모든 곳에서 사용 가능


< 접근 제어자의 사용 범위 >
접근 범위가 넓다, 좁다
접근 세기가 약하다, 강하다

넓다, 약하다(weak), 느슨하다(loose)    <->    좁다, 강하다(strong), 타이트하다(tight)
- private > protected > default > public



< 상속 관계의 용어 정리 >
상속을 하는 클래스 - 기반(Base) 클래스,     부모 클래스 ★, 슈퍼(super) 클래스, 상위 클래스
상속을 받는 클래스 - 파생(Derived) 클래스, 자식 클래스 ★, 서브(sub) 클래스,    하위 클래스

< 자산 >
- 부모에게서 물려 받는 것
- 멤버 변수, 멤버 메서드를 지칭한다 (초기자와 생성자는 자산에 포함되지 않음)


< this와 super >
this.xxx : 같은 클래스의 멤버에 접근하는 방법
this( )   : 같은 클래스의 생성자 안에서 다른 생성자를 호출하는 방법

super.xxx : 자식 클래스에서 부모 클래스 멤버에 접근하는 방법
super( )  : 자식 클래스의 생성자에서 부모 클래스의 생성자를 호출하는 방법


< 오버 라이딩(Overriding) >
- 메서드의 재정의 (오버 로딩은 메서드의 중복정의)
- 상속의 관계에서 부모 클래스의 메서드를 자식 클래스에서 재정의하는 것.
--[ 오버 라이딩 규칙 ]
- 자식 클래스의 메서드는 부모 클래스의 메서드와 완벽하게 일치해야 함.
  (메서드 이름, 매개변수 개수와 타입, 리턴 타입 전부 다)
- 접근 제한은 부모 클래스 메서드보다 강한 접근 제한을 사용할 수 없음. (동등하거나 약한 접근 제한을 사용함)

